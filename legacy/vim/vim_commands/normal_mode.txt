2. Normal mode

CHAR	 any non-blank character
WORD	 a sequence of non-blank characters
N	 a number entered before the command
{motion} a cursor movement command
Nmove	 the text that is moved over with a {motion}
SECTION	 a section that possibly starts with '}' instead of '{'

note: 1 = cursor movement command; 2 = can be undone/redone

tag		char	      note action in Normal mode
------------------------------------------------------------------------------
CTRL-@		   not used
CTRL-A		2  add N to number at/after cursor
CTRL-B		1  scroll N screens Backwards
CTRL-C		   interrupt current (search) command
CTRL-D		   scroll Down N lines (default: half a screen)
CTRL-E		   scroll N lines upwards (N lines Extra)
CTRL-F		1  scroll N screens Forward
CTRL-G		   display current file name and position
<BS>		1  same as "h"
CTRL-H		1  same as "h"
<Tab>		1  go to N newer entry in jump list
CTRL-I		1  same as <Tab>
<NL>		1  same as "j"
CTRL-J		1  same as "j"
CTRL-K		   not used
CTRL-L		   redraw screen
<CR>		1  cursor to the first CHAR N lines lower
CTRL-M		1  same as <CR>
CTRL-N		1  same as "j"
CTRL-O		1  go to N older entry in jump list
CTRL-P		1  same as "k"
CTRL-Q		   (used for terminal control flow)
CTRL-R		2  redo changes which were undone with 'u'
CTRL-S		   (used for terminal control flow)
CTRL-T		   jump to N older Tag in tag list
CTRL-U		   scroll N lines Upwards (default: half a screen)
CTRL-V		   start blockwise Visual mode
CTRL-W {char}	   window commands, see |CTRL-W|
CTRL-X		2  subtract N from number at/after cursor
CTRL-Y		   scroll N lines downwards
CTRL-Z		   suspend program (or start new shell)
CTRL-[ <Esc>	   not used
CTRL-\ CTRL-N	   go to Normal mode (no-op)
CTRL-\ CTRL-G	   go to mode specified with 'insertmode'
CTRL-\ a - z	   reserved for extensions
CTRL-\ others      not used
CTRL-]		   :ta to ident under cursor
CTRL-^		   edit Nth alternate file (equivalent to
				   ":e #N")
CTRL-_		   not used

<Space>		1  same as "l"
!{motion}{filter} 2  filter Nmove text through the {filter}
                           command
!!{filter}	2  filter N lines through the {filter} command
"{a-zA-Z0-9.%#:-"}  use register {a-zA-Z0-9.%#:-"} for next delete, yank or put (uppercase to append) ({.%#:} only work with put)
#		1  search backward for the Nth occurrence of the ident under the cursor
$		1  cursor to the end of Nth next line
%		1  find the next (curly/square) bracket on this line and go to its match, or go to matching comment bracket, or go to matching
                           preprocessor directive.
{count}%	1  go to N percentage in the file
&		2  repeat last :s
'{a-zA-Z0-9}	1  cursor to the first CHAR on the line with mark {a-zA-Z0-9}
''		1  cursor to the first CHAR of the line where the cursor was before the latest jump.
'(		1  cursor to the first CHAR on the line of the start of the current sentence
')		1  cursor to the first CHAR on the line of the end of the current sentence
'<		1  cursor to the first CHAR of the line where highlighted area starts/started in the current buffer.
'>		1  cursor to the first CHAR of the line where highlighted area ends/ended in the current buffer.
'[		1  cursor to the first CHAR on the line of the start of last operated text or start of put text
']		1  cursor to the first CHAR on the line of the end of last operated text or end of put text
'{		1  cursor to the first CHAR on the line of the start of the current paragraph
'}		1  cursor to the first CHAR on the line of the end of the current paragraph
(		1  cursor N sentences backward
)		1  cursor N sentences forward
*		1  search forward for the Nth occurrence of the ident under the cursor
+		1  same as <CR>
,		1  repeat latest f, t, F or T in opposite direction N times
-		1  cursor to the first CHAR N lines higher
.		2  repeat last change with count replaced with N
/{pattern}<CR>	1  search forward for the Nth occurrence of {pattern}
/<CR>		1  search forward for {pattern} of last search
0		1  cursor to the first char of the line
1		   prepend to command to give a count
2			"
3			"
4			"
5			"
6			"
7			"
8			"
9			"
:		1  start entering an Ex command
{count}:	   start entering an Ex command with range from current line to N-1 lines down
;		1  repeat latest f, t, F or T N times <{motion}	2  shift Nmove lines one 'shiftwidth' leftwards
<<		2  shift N lines one 'shiftwidth' leftwards
={motion}	2  filter Nmove lines through "indent"
==		2  filter N lines through "indent"
>{motion}	2  shift Nmove lines one 'shiftwidth' rightwards
>>		2  shift N lines one 'shiftwidth' rightwards
?{pattern}<CR>	1  search backward for the Nth previous occurrence of {pattern}
?<CR>		1  search backward for {pattern} of last search
@{a-z}		2  execute the contents of register {a-z} N times
@:		   repeat the previous ":" command N times
@@		2  repeat the previous @{a-z} N times
A		2  append text after the end of the line N times
B		1  cursor N WORDS backward
["x]C		2  change from the cursor position to the end of the line, and N-1 more lines [into register x]; synonym for "c$"
["x]D		2  delete the characters under the cursor until the end of the line and N-1 more lines [into register x]; synonym for "d$"
E		1  cursor forward to the end of WORD N
F{char}		1  cursor to the Nth occurrence of {char} to the left
G		1  cursor to line N, default last line
H		1  cursor to line N from top of screen
I		2  insert text before the first CHAR on the line N times
J		2  Join N lines; default is 2
K	        lookup Keyword under the cursor with 'keywordprg'
L		1  cursor to line N from bottom of screen
M		1  cursor to middle line of screen
N		1  repeat the latest '/' or '?' N times in opposite direction
O		2  begin a new line above the cursor and insert text, repeat N times
["x]P		2  put the text [from register x] before the cursor N times
Q		   switch to "Ex" mode
R		2  enter replace mode: overtype existing characters, repeat the entered text N-1 times
["x]S		2  delete N lines [into register x] and start insert; synonym for "cc".
T{char}		1  cursor till after Nth occurrence of {char} to the left
U		2  undo all latest changes on one line
V		   start linewise Visual mode
W		1  cursor N WORDS forward
["x]X		2  delete N characters before the cursor [into register x]
["x]Y		   yank N lines [into register x]; synonym for "yy"
ZZ		   store current file if modified, and exit
ZQ		   exit current file always
[{char}		   square bracket command (see |[| below)
\		   not used
]{char}		   square bracket command (see |]| below)
^		1  cursor to the first CHAR of the line
_		1  cursor to the first CHAR N - 1 lines lower
`{a-zA-Z0-9}	1  cursor to the mark {a-zA-Z0-9}
`(		1  cursor to the start of the current sentence
`)		1  cursor to the end of the current sentence
`<		1  cursor to the start of the highlighted area
`>		1  cursor to the end of the highlighted area
`[		1  cursor to the start of last operated text or start of putted text
`]		1  cursor to the end of last operated text or end of putted text
``		1  cursor to the position before latest jump
`{		1  cursor to the start of the current paragraph
`}		1  cursor to the end of the current paragraph
a		2  append text after the cursor N times
b		1  cursor N words backward
["x]c{motion}	2  delete Nmove text [into register x] and start insert
["x]cc		2  delete N lines [into register x] and start insert
["x]d{motion}	2  delete Nmove text [into register x]
["x]dd		2  delete N lines [into register x]
do		2  same as ":diffget"
dp		2  same as ":diffput"
e		1  cursor forward to the end of word N
f{char}		1  cursor to Nth occurrence of {char} to the right
g{char}		   extended commands, see |g| below
h		1  cursor N chars to the left
i		2  insert text before the cursor N times
j		1  cursor N lines downward
k		1  cursor N lines upward
l		1  cursor N chars to the right
m{A-Za-z}	   set mark {A-Za-z} at cursor position
n		1  repeat the latest '/' or '?' N times
o		2  begin a new line below the cursor and insert text, repeat N times
["x]p		2  put the text [from register x] after the cursor N times
q{0-9a-zA-Z"}	   record typed characters into named register {0-9a-zA-Z"} (uppercase to append)
q		   (while recording) stops recording
q:		   edit : command-line in command-line window
q/		   edit / command-line in command-line window
q?		   edit ? command-line in command-line window
r{char}		2  replace N chars with {char}
["x]s		2  (substitute) delete N characters [into register x] and start insert
t{char}		1  cursor till before Nth occurrence of {char} to the right
u		2  undo changes
v		   start characterwise Visual mode
w		1  cursor N words forward
["x]x		2  delete N characters under and after the cursor [into register x]
["x]y{motion}	   yank Nmove text [into register x]
["x]yy		   yank N lines [into register x]
z{char}		   commands starting with 'z', see |z| below
{		1  cursor N paragraphs backward
1  cursor to column N
}		1  cursor N paragraphs forward
~		2  'tildeop' off: switch case of N characters under cursor and move the cursor N characters to the right
~{motion}	   'tildeop' on: switch case of Nmove text
<C-End>		1  same as "G"
<C-Home>	1  same as "gg"
<C-Left>	1  same as "b"
<C-LeftMouse>	   ":ta" to the keyword at the mouse click
<C-Right>	1  same as "w"
<C-RightMouse>	   same as "CTRL-T"
["x]<Del>	2  same as "x"
{count}<Del>	   remove the last digit from {count}
<Down>		1  same as "j"
<End>		1  same as "$"
<F1>		   same as <Help>
<Help>		   open a help window
<Home>		1  same as "0"
<Insert>	2  same as "i"
<Left>		1  same as "h"
<LeftMouse>	1  move cursor to the mouse click position
<MiddleMouse>	2  same as "gP" at the mouse click position
<PageDown>	   same as CTRL-F
<PageUp>	   same as CTRL-B
<Right>		1  same as "l"
<RightMouse>	   start Visual mode, move cursor to the mouse click position
<S-Down>	1  same as CTRL-F
<S-Left>	1  same as "b"
<S-LeftMouse>	   same as "*" at the mouse click position
<S-Right>	1  same as "w"
|<S-RightMouse>| <S-RightMouse>	   same as "#" at the mouse click position
<S-Up>		1  same as CTRL-B
<Undo>		2  same as "u"
<Up>		1  same as "k"
<ScrollWheelDown>	move window three lines down
<S-ScrollWheelDown>	move window one page down
<ScrollWheelUp>		move window three lines up
<S-ScrollWheelUp>	move window one page up
<ScrollWheelLeft>	move window six columns left
<S-ScrollWheelLeft>	move window one page left
<ScrollWheelRight>	move window six columns right
<S-ScrollWheelRight>	move window one page right


==============================================================================
2.1 Text objects

These can be used after an operator or in Visual mode to select an object.

command		   action in op-pending and Visual mode	~
------------------------------------------------------------------------------
a"		   double quoted string
a'		   single quoted string
a(		   same as ab
a)		   same as ab
a<		   "a <>" from '<' to the matching '>'
a>		   same as a<
aB		   "a Block" from "[{" to "]}" (with brackets)
aW		   "a WORD" (with white space)
a[		   "a []" from '[' to the matching ']'
a]		   same as a[
a`		   string in backticks
ab		   "a block" from "[(" to "])" (with braces)
ap		   "a paragraph" (with white space)
as		   "a sentence" (with white space)
at		   "a tag block" (with white space)
aw		   "a word" (with white space)
a{		   same as aB
a}		   same as aB
i"		   double quoted string without the quotes
i'		   single quoted string without the quotes
i(		   same as ib
i)		   same as ib
i<		   "inner <>" from '<' to the matching '>'
i>		   same as i<
iB		   "inner Block" from "[{" and "]}"
iW		   "inner WORD"
i[		   "inner []" from '[' to the matching ']'
i]		   same as i[
i`		   string in backticks without the backticks
ib		   "inner block" from "[(" to "])"
ip		   "inner paragraph"
is		   "inner sentence"
it		   "inner tag block"
iw		   "inner word"
i{		   same as iB
i}		   same as iB

==============================================================================
2.2 Window commands

command		   action in Normal mode
------------------------------------------------------------------------------
CTRL-W CTRL-B	   same as "CTRL-W b"
CTRL-W CTRL-C	   same as "CTRL-W c"
CTRL-W CTRL-D	   same as "CTRL-W d"
CTRL-W CTRL-F	   same as "CTRL-W f"
CTRL-W CTRL-G	   same as "CTRL-W g .."
CTRL-W CTRL-H	   same as "CTRL-W h"
CTRL-W CTRL-I	   same as "CTRL-W i"
CTRL-W CTRL-J	   same as "CTRL-W j"
CTRL-W CTRL-K	   same as "CTRL-W k"
CTRL-W CTRL-L	   same as "CTRL-W l"
CTRL-W CTRL-N	   same as "CTRL-W n"
CTRL-W CTRL-O	   same as "CTRL-W o"
CTRL-W CTRL-P	   same as "CTRL-W p"
CTRL-W CTRL-Q	   same as "CTRL-W q"
CTRL-W CTRL-R	   same as "CTRL-W r"
CTRL-W CTRL-S	   same as "CTRL-W s"
CTRL-W CTRL-T	   same as "CTRL-W t"
CTRL-W CTRL-V	   same as "CTRL-W v"
CTRL-W CTRL-W	   same as "CTRL-W w"
CTRL-W CTRL-X	   same as "CTRL-W x"
CTRL-W CTRL-Z	   same as "CTRL-W z"
CTRL-W CTRL-]	   same as "CTRL-W ]"
CTRL-W CTRL-^	   same as "CTRL-W ^"
CTRL-W CTRL-_	   same as "CTRL-W _"
CTRL-W +	   increase current window height N lines
CTRL-W -	   decrease current window height N lines
CTRL-W <	   decrease current window width N columns
CTRL-W =	   make all windows the same height & width
CTRL-W >	   increase current window width N columns
CTRL-W H	   move current window to the far left
CTRL-W J	   move current window to the very bottom
CTRL-W K	   move current window to the very top
CTRL-W L	   move current window to the far right
CTRL-W P	   go to preview window
CTRL-W R	   rotate windows upwards N times
CTRL-W S	   same as "CTRL-W s"
CTRL-W T	   move current window to a new tab page
CTRL-W W	   go to N previous window (wrap around)
CTRL-W ]	   split window and jump to tag under cursor
CTRL-W ^	   split current window and edit alternate file N
CTRL-W _	   set current window height to N (default: very high)
CTRL-W b	   go to bottom window
CTRL-W c	   close current window (like |:close|)
CTRL-W d	   split window and jump to definition under the cursor
CTRL-W f	   split window and edit file name under the cursor
CTRL-W F	   split window and edit file name under the cursor and jump to the line number following the file name.
|CTRL-W_g_CTRL-]| CTRL-W g CTRL-]  split window and do |:tjump| to tag under cursor
CTRL-W g ]	   split window and do |:tselect| for tag under cursor
CTRL-W g }	   do a |:ptjump| to the tag under the cursor
CTRL-W g f	   edit file name under the cursor in a new tab page
CTRL-W g F	   edit file name under the cursor in a new tab page and jump to the line number following the file name.
CTRL-W h	   go to Nth left window (stop at first window)
CTRL-W i	   split window and jump to declaration of identifier under the cursor
CTRL-W j	   go N windows down (stop at last window)
CTRL-W k	   go N windows up (stop at first window)
CTRL-W l	   go to Nth right window (stop at last window)
CTRL-W n	   open new window, N lines high
CTRL-W o	   close all but current window (like |:only|)
CTRL-W p	   go to previous (last accessed) window
CTRL-W q	   quit current window (like |:quit|)
CTRL-W r	   rotate windows downwards N times
CTRL-W s	   split current window in two parts, new window N lines high
CTRL-W t	   go to top window
CTRL-W v	   split current window vertically, new window N columns wide
CTRL-W w	   go to N next window (wrap around)
CTRL-W x	   exchange current window with window N (default: next window)
CTRL-W z	   close preview window set window width to N columns
CTRL-W }	   show tag under cursor in preview window
CTRL-W <Down>	   same as "CTRL-W j"
CTRL-W <Up>	   same as "CTRL-W k"
CTRL-W <Left>	   same as "CTRL-W h"
CTRL-W <Right>	   same as "CTRL-W l"

==============================================================================
2.3 Square bracket commands					*[* *]*

tag		char	      note action in Normal mode	~
------------------------------------------------------------------------------
[ CTRL-D	   jump to first #define found in current and included files matching the word under the cursor, start searching at beginning of
				   current file
[ CTRL-I	   jump to first line in current and included files that contains the word under the cursor, start searching at beginning of
				   current file
[#		1  cursor to N previous unmatched #if, #else or #ifdef
['		1  cursor to previous lowercase mark, on first non-blank
[(		1  cursor N times back to unmatched '('
[*		1  same as "[/"
[`		1  cursor to previous lowercase mark
[/		1  cursor to N previous start of a C comment
[D		   list all defines found in current and included files matching the word under the cursor, start searching at beginning of
                           current file
[I		   list all lines found in current and included files that contain the word under the cursor, start searching at beginning of
                           current file
[P		2  same as "[p"
[[		1  cursor N sections backward
[]		1  cursor N SECTIONS backward
[c		1  cursor N times backwards to start of change
[d		   show first #define found in current and included files matching the word under the cursor, start searching at beginning of
                           current file
[f		   same as "gf"
[i		   show first line found in current and included files that contains the word under the cursor, start searching at beginning of
                           current file
[m		1  cursor N times back to start of member function
[p		2  like "P", but adjust indent to current line
[s		1  move to the previous misspelled word
[z		1  move to start of open fold
[{		1  cursor N times back to unmatched '{'
[<MiddleMouse>	2  same as "[p"
] CTRL-D	   jump to first #define found in current and included files matching the word under the cursor, start searching at cursor position
] CTRL-I	   jump to first line in current and included files that contains the word under the cursor, start searching at cursor position
]#		1  cursor to N next unmatched #endif or #else
]'		1  cursor to next lowercase mark, on first non-blank
])		1  cursor N times forward to unmatched ')'
]*		1  same as "]/"
]`		1  cursor to next lowercase mark
]/		1  cursor to N next end of a C comment
]D		   list all #defines found in current and included files matching the word under the cursor, start searching at cursor position
]I		   list all lines found in current and included files that contain the word under the cursor, start searching at cursor position
]P		2  same as "[p"
][		1  cursor N SECTIONS forward
]]		1  cursor N sections forward
]c		1  cursor N times forward to start of change
]d		   show first #define found in current and included files matching the word under the cursor, start searching at cursor position
]f		   same as "gf"
]i		   show first line found in current and included files that contains the word under the cursor, start searching at cursor position
]m		1  cursor N times forward to end of member function
]p		2  like "p", but adjust indent to current line
]s		1  move to next misspelled word
]z		1  move to end of open fold
]}		1  cursor N times forward to unmatched '}'
]<MiddleMouse>	2  same as "]p"


==============================================================================
2.4 Commands starting with 'g'

tag		char	      note action in Normal mode	~
------------------------------------------------------------------------------
g CTRL-A	   only when compiled with MEM_PROFILE defined: dump a memory profile
g CTRL-G	   show information about current cursor position
g CTRL-H	   start Select block mode
g CTRL-]	   |:tjump| to the tag under the cursor
g#		1  like "#", but without using "\<" and "\>"
g$		1  when 'wrap' off go to rightmost character of the current line that is on the screen; when 'wrap' on go to the rightmost character
                           of the current screen line
g&		2  repeat last ":s" on all lines
g'{mark}	1  like |'| but without changing the jumplist
g`{mark}	1  like |`| but without changing the jumplist
g*		1  like "*", but without using "\<" and "\>"
g+		   go to newer text state N times
g,		1  go to N newer position in change list
g-		   go to older text state N times
g0		1  when 'wrap' off go to leftmost character of the current line that is on the screen; when 'wrap' on go to the leftmost character
                           of the current screen line
g8		   print hex value of bytes used in UTF-8 character under the cursor
g;		1  go to N older position in change list
g<		   display previous command output
g?		2  Rot13 encoding operator
g??		2  Rot13 encode current line
g?g?		2  Rot13 encode current line
gD		1  go to definition of word under the cursor in current file
gE		1  go backwards to the end of the previous WORD
gH		   start Select line mode
gI		2  like "I", but always start in column 1
gJ		2  join lines without inserting space
gN	      1,2  find the previous match with the last used search pattern and Visually select it
["x]gP		2  put the text [from register x] before the cursor N times, leave the cursor after it
gQ		    switch to "Ex" mode with Vim editing
gR		2  enter Virtual Replace mode
gT		   go to the previous tab page
gU{motion}	2  make Nmove text uppercase
gV		   don't reselect the previous Visual area when executing a mapping or menu in Select mode
g]		   :tselect on the tag under the cursor
g^		1  when 'wrap' off go to leftmost non-white character of the current line that is on the screen; when 'wrap' on go to the
                           leftmost non-white character of the current screen line
g_		1  cursor to the last CHAR N - 1 lines lower
ga		   print ascii value of character under the cursor
gd		1  go to definition of word under the cursor in current function
ge		1  go backwards to the end of the previous word
gf		   start editing the file whose name is under the cursor
gF		   start editing the file whose name is under the cursor and jump to the line number following the filename.
gg		1  cursor to line N, default first line
gh		   start Select mode
gi		2  like "i", but first move to the |'^| mark
gj		1  like "j", but when 'wrap' on go N screen lines down
gk		1  like "k", but when 'wrap' on go N screen lines up
gn	      1,2  find the next match with the last used search pattern and Visually select it
gm		1  go to character at middle of the screenline
go		1  cursor to byte N in the buffer
["x]gp		2  put the text [from register x] after the cursor N times, leave the cursor after it
gq{motion}	2  format Nmove text
gr{char}	2  virtual replace N chars with {char}
gs		   go to sleep for N seconds (default 1)
gt		   go to the next tab page
gu{motion}	2  make Nmove text lowercase
gv		   reselect the previous Visual area
gw{motion}	2  format Nmove text and keep cursor
gx		   execute application for file name under the cursor (only with |netrw| plugin)
g@{motion}	   call 'operatorfunc'
g~{motion}	2  swap case for Nmove text
g<Down>		1  same as "gj"
g<End>		1  same as "g$"
g<Home>		1  same as "g0"
g<LeftMouse>	   same as <C-LeftMouse>
g<MiddleMouse>	   same as <C-MiddleMouse>
g<RightMouse>	   same as <C-RightMouse>
g<Up>		1  same as "gk"



==============================================================================
2.5 Commands starting with 'z'

tag		char	      note action in Normal mode	~
------------------------------------------------------------------------------
z<CR>		   redraw, cursor line to top of window, cursor on first non-blank
z{height}<CR>	   redraw, make window {height} lines high
z+		   cursor on line N (default line below window), otherwise like "z<CR>"
z-		   redraw, cursor line at bottom of window, cursor on first non-blank
z.		   redraw, cursor line to center of window, cursor on first non-blank
z=		   give spelling suggestions
zA		   open a closed fold or close an open fold recursively
zC		   close folds recursively
zD		   delete folds recursively
zE		   eliminate all folds
zF		   create a fold for N lines
zG		   mark word as good spelled word
zH		   when 'wrap' off scroll half a screenwidth to the right
zL		   when 'wrap' off scroll half a screenwidth to the left
zM		   set 'foldlevel' to zero
zN		   set 'foldenable'
zO		   open folds recursively
zR		   set 'foldlevel' to the deepest fold
zW		   mark word as wrong (bad) spelled word
zX		   re-apply 'foldlevel'
z^		   cursor on line N (default line above window), otherwise like "z-"
za		   open a closed fold, close an open fold
zb		   redraw, cursor line at bottom of window
zc		   close a fold
zd		   delete a fold
ze		   when 'wrap' off scroll horizontally to position the cursor at the end (right side) of the screen
zf{motion}	   create a fold for Nmove text
zg		   mark word as good spelled word
zh		   when 'wrap' off scroll screen N characters to the right
zi		   toggle 'foldenable'
zj		1  move to the start of the next fold
zk		1  move to the end of the previous fold
zl		   when 'wrap' off scroll screen N characters to the left
zm		   subtract one from 'foldlevel'
zn		   reset 'foldenable'
zo		   open fold
zr		   add one to 'foldlevel'
zs		   when 'wrap' off scroll horizontally to position the cursor at the start (left side) of the screen
zt		   redraw, cursor line at top of window
zv		   open enough folds to view the cursor line
zw		   mark word as wrong (bad) spelled word
zx		   re-apply 'foldlevel' and do "zv"
zz		   redraw, cursor line at center of window
z<Left>		   same as "zh"
z<Right>	   same as "zl"