"  Sergio Kovtunenko v0.8
"  date: 19.NOV.2023

" Russian keymaps {
    map й q
    map ц w
    map у e
    map к r
    map е t
    map н y
    map г u
    map ш i
    map щ o
    map з p
    map х [
    map ъ ]
    map ф a
    map ы s
    map в d
    map а f
    map п g
    map р h
    map о j
    map л k
    map д l
    map ж ;
    map э '
    map ё \
    map я z
    map ч x
    map с c
    map м v
    map и b
    map т n
    map ь m
    map б ,
    map ю .
    map Й Q
    map Ц W
    map У E
    map К R
    map Е T
    map Н Y
    map Г U
    map Ш I
    map Щ O
    map З P
    map Х {
    map Ъ }
    map Ф A
    map Ы S
    map В D
    map А F
    map П G
    map Р H
    map О J
    map Л K
    map Д L
    map Ж :
    map Э "
    map Я Z
    map Ч X
    map С C
    map М V
    map И B
    map Т N
    map Ь M
    map Б <
    map Ю >
    map Ё /|

" }


" General settings {

    let mapleader = " "

    set scrolloff=5
    set laststatus=2

    " When included, Vim will use the clipboard register '*' for all yank, delete, change and put operations:
    " before in my config it was: unnamed
    set clipboard+=ideaput

    set idearefactormode=keep

    " Sync IdeaJoin (https://github.com/JetBrains/ideavim/blob/master/doc/ideajoin-examples.md) bookmarks and Vim marks:
    set ideamarks

    " Use visual bell instead of beeping:
    set visualbell

    " searches wrap around the end of the file
    set wrapscan

    " print the line number in front of each line + show the line number relative to the line with
    set number
    " set relativenumber

    " message on status line to show current mode
    set showcmd showmode
    set hlsearch incsearch

    " ignore case in search patterns + no ignore case when pattern has uppercase
    set smartcase ignorecase

    " IdeaVim ONLY flag to perform a join via the IDE
    set ideajoin

    " Defines keywords for commands like 'w', '*', etc
    set iskeyword

    " maximum number of changes that can be undone
    set undolevels=100
    set mps+=<:>

    set iminsert=0
    set imsearch=0

    highlight lCursor guifg=NONE guibg=Cyan

" }


" Enable plugin emulations inside IDEA (https://github.com/JetBrains/ideavim/wiki/IdeaVim-Plugins) {

    " Possible values: legacy | on | off https://youtrack.jetbrains.com/issue/VIM-765#focus=Comments-27-4264908.0-0
    set dialogescape=off
    " https://youtrack.jetbrains.com/issue/VIM-765#focus=Comments-27-4264908.0-0
    set nooneline=off

    set surround

    " Description: https://github.com/machakann/vim-highlightedyank/blob/master/doc/highlightedyank.txt :
    Plug 'machakann/vim-highlightedyank'
    set highlightedyank
    " let g:highlightedyank_highlight_color = "rgba(160, 160, 160, 155)"
    let g:highlightedyank_highlight_duration = "1000"

    " vim-paragraph-motion link: https://github.com/dbakker/vim-paragraph-motion#vim-paragraph-motion
    Plug 'dbakker/vim-paragraph-motion'

    set multiple-cursors

    set commentary

    " required additional plugin installation `EasyMotion`
    " set easymotion
    " if this plugin is enabled then the combination needs to be enabled as well, <leader><leader> is the default
    " This setting DISABLES feature: This plugin maps the shortcuts of AceJump to the corresponding actions in IdeaVim-EasyMotion to improve the experience of AceJump users:
    " let g:EasyMotion_override_acejump = 0

    " required additional plugin 'IdeaVimExtension' to be installed
    set keep-english-in-normal-and-restore-in-insert

    " For this plugin `IdeaVim-Sneak` (additional installation required):
    " Use `s` plus two characters to search forward in document;
    " Use `S` plus two characters to search backward in document;
    " Use `;` and `,` just as with `f` and `F` commands to repeat searches;
    set sneak

    " required additional plugin 'IdeaVim-Quickscope' to be installed
    " If you are using ideavim-sneak please ensure set quickscope is placed after set sneak:
    set quickscope
    let g:qs_highlight_on_keys = ['f', 'F', 't', 'T']
    let g:qs_accepted_chars = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9']
    " to configure the first occurrence character color. Please use a hex color:
    let g:qs_primary_color = '#ff0000'
    " to configure the second occurrence character color. Again, please use a hex color:
    let g:qs_secondary_color = '#ff00ff'

    " required additional plugin 'Which-Key' to be installed
    " set which-key
    " suggestion for `Which-key` plugin to disable the timeout option :
    set notimeout

" }


" General key mappings {

    " Don't use Ex mode, use Q for formatting:
    map Q gq

    " clear the search buffer when hitting return:
    nnoremap <leader>/ :nohlsearch<CR>
    nnoremap <leader><cr> :nohlsearch<cr>
    nnoremap <silent> <leader><space> :noh<cr>

    " easy system clipboard copy/paste integration (changed from "+ to "* in version 2.5.0):
    vmap <leader>y "*y
    vmap <leader>d "*d
    nmap <leader>y "*yy
    nmap <leader>p "*p
    nmap <leader>P "*P
    vmap <leader>p "*p
    vmap <leader>P "*P

    " Make the Y behave similar to D and C:
    noremap Y y$

    " Navigation for search results:
    nnoremap n nzz
    nnoremap N Nzz
    nnoremap gd gdzz

    " Select all text
    nnoremap vv ggVG

    " Moving blocks of text in visual mode:
    vnoremap < <gv
    vnoremap > >gv

    " easy window navigation (in split-window mode):
    nnoremap <C-S-l> <C-w>l
    nnoremap <C-S-j> <C-w>j
    nnoremap <C-S-h> <C-w>h
    nnoremap <C-S-k> <C-w>k
    " nnoremap <a-h> gT
    " nnoremap <a-l> gt
    nnoremap <C-S-tab> gT
    nnoremap <C-tab> gt
    nnoremap <tab> <c-w>w

" }


" Leader IDEA-specific mappings {

    " Window management {

        nmap <leader>h <action>(PreviousTab)
        nmap <leader>l <action>(NextTab)

    " }

    " built in search looks better:
    nnoremap / :action Find<CR>
    xnoremap / :action Find<CR>
    " but preserve ideavim search:
    nnoremap g/ /

    " built-in navigation to navigated items works better
    noremap <C-o> :action Back<CR>zt
    noremap <C-i> :action Forward<CR>zt
    " but preserve ideavim defaults
    nnoremap g<C-o> <C-o>
    nnoremap g<C-i> <C-i>

    " Navigation / Quick Info (extracted from my config) {

        nnoremap <leader>c :action CallHierarchy<CR>
        nnoremap <leader>C :action TypeHierarchy<CR>
        nnoremap <leader><C-c> :action MethodHierarchy<CR>

        nnoremap <leader>a :action ShowUsages<CR>
        nnoremap <leader>A :action FindUsages<CR>
        nnoremap <leader>s :action FindUsages<CR>

        nnoremap <leader>j :action GotoImplementation<CR>zt
        nnoremap <leader>k :action GotoSuperMethod<CR>zt
        nnoremap <leader>gt :action GotoTest<cr>zt

        nnoremap <leader>W :action ParameterInfo<CR>
        nnoremap <leader>w :action QuickImplementations<CR>
        nnoremap <leader>q :action QuickJavaDoc<CR>
        nnoremap <leader>Q :action ShowHoverInfo<CR>

        nnoremap <leader>m :action FileStructurePopup<CR>
        nnoremap <leader>E :action RecentFiles<CR>

        nnoremap <leader>o :action GotoClass<CR>
        nnoremap <leader>O :action GotoFile<CR>
        nnoremap <leader><C-o> :action GotoSymbol<CR>

        " !!! "Identifier Highlighter Reloaded" plugin mapping (plugin must be installed!)
        noremap <C-.> :action NextIdentifierReloaded<CR>zt
        noremap <C-,> :action PreviousIdentifierReloaded<CR>zt

        " !!! Previous/next methods:
        nnoremap <C-j> :action MethodDown<CR>zt
        nnoremap <C-k> :action MethodUp<CR>zt
        nnoremap [m :action MethodUp<cr>zt
        nnoremap ]m :action MethodDown<cr>zt
        " nnoremap [q :action PreviousOccurence<cr>
        " nnoremap ]q :action NextOccurence<cr>
        " nnoremap [c :action VcsShowPrevChangeMarker<cr>
        " nnoremap ]c :action VcsShowNextChangeMarker<cr>
        nnoremap <C-h> :action EditorCodeBlockStart<CR>zt
        nnoremap <C-l> :action EditorCodeBlockEnd<CR>zz
        noremap <leader>[ :action EditorCodeBlockStart<CR>zt
        noremap <leader>] :action EditorCodeBlockEnd<CR>zz

    " }

    " Commenting (extracted from my config)
    " nnoremap <leader> :action CommentByBlockComment<CR>
    " nnoremap <leader>\ :action CommentByLineComment<CR>

    xnoremap <C-S-o> :action OverrideMethods<CR>
    xnoremap <C-S-i> :action ImplementMethods<CR>


    " Refactoring Commands: {

        noremap <leader>G :action Generate<CR>

        nnoremap <leader>r :action Refactorings.QuickListPopupAction<CR>
        nnoremap <leader>R :action RenameElement<cr>
        noremap <leader>N :action NewElement<CR>

        " !!! Mnemonic 'extract' a thing
        nnoremap <leader>em :action ExtractMethod<CR>
        vnoremap <leader>em :<BS><BS><BS><BS><BS>action VimVisualSwapSelections<CR>:action ExtractMethod<CR>
        noremap <leader>ec :action IntroduceConstant<CR>
        noremap <leader>ef :action IntroduceField<CR>
        noremap <leader>ep :action IntroduceParameter<CR>
        noremap <leader>ev :action IntroduceVariable<CR>

    " }

    " Debugging/Run {

        " Breakpoints management:
        nnoremap <leader>bb :action ToggleLineBreakpoint<cr>
        nnoremap <leader>br :action ViewBreakpoints<cr>

        " Debug and Run configurations:
        nnoremap \d :action ChooseDebugConfiguration<CR>
        nnoremap \D :action Debug<cr>
        nnoremap \r :action ChooseRunConfiguration<CR>
        nnoremap \R :action Run<cr>

    " }

    " Git VCS (extracted from my config) {

        " Compare (extracted from my config)   keep in mind that <leader>d conflicts with cut into system buffer, but works fine!
        nnoremap <leader>d :action Compare.SameVersion<CR>
        noremap <leader>D :action CompareClipboardWithSelection<CR>

        nnoremap <leader>T :action Vcs.UpdateProject<CR>
        nnoremap <leader>K :action Git.Stash<CR>
        nnoremap <leader>L :action Git.Unstash<CR>
        nnoremap <leader>J :action Vcs.QuickListPopupAction<CR>
        nnoremap <leader>H :action Vcs.ShowTabbedFileHistory<CR>
        nnoremap <leader>Z :action ChangesView.Revert<CR>
        nnoremap <leader>ga :action Annotate<CR>

        " Git random junk:
        " noremap <leader>gl :action Vcs.Show.Log<CR>

    " }

    " vnoremap <leader>t :<BS><BS><BS><BS><BS>action VimVisualSwapSelections<CR>:action SurroundWithLiveTemplate<CR>

    " EasyMotion (AceJump plugin) -- enable the plugin in the config
    " nnoremap <leader><leader> :action AceAction<CR>

" }

" Set handlers to avoid clashes with IDE {

    sethandler <C-,> a:vim
    sethandler <C-.> a:vim
    sethandler <C-D> a:vim
    sethandler <C-F> a:vim
    sethandler <C-I> a:vim
    sethandler <C-L> a:vim
    sethandler <C-M> a:vim
    sethandler <C-O> a:vim
    sethandler <C-P> a:vim
    sethandler <C-R> a:vim
    sethandler <C-T> a:vim
    sethandler <C-W> a:vim
    sethandler <C-Tab> a:vim
    sethandler <C-S-Tab> a:vim
    sethandler <C-S-2> a:vim
    sethandler <C-S-6> a:vim
    sethandler <C-B> a:vim
    sethandler <C-C> a:vim
    sethandler <C-E> a:vim
    sethandler <C-G> a:vim
    sethandler <C-H> a:vim
    sethandler <C-J> a:vim
    sethandler <C-K> a:vim
    sethandler <C-N> a:vim
    sethandler <C-S-O> a:vim
    sethandler <C-Q> a:vim
    sethandler <C-U> a:vim
    sethandler <C-Y> a:vim
    sethandler <C-[> a:vim
    sethandler <C-\> a:vim
    sethandler <C-]> a:vim
    sethandler <C-S-H> a:vim
    sethandler <C-S-J> a:vim
    sethandler <C-S-K> a:vim

    sethandler <C-1> a:ide
    sethandler <C-2> a:ide
    sethandler <C-3> a:ide
    sethandler <C-4> a:ide
    sethandler <C-5> a:ide
    sethandler <C-6> a:ide
    sethandler <C-7> a:ide
    sethandler <C-8> a:ide
    sethandler <C-9> a:ide
    sethandler <C-0> a:ide
    sethandler <C-C> a:ide
    sethandler <C-V> a:ide
    sethandler <C-X> a:ide
    sethandler <C-A> a:ide
    sethandler <C-S> a:ide

"}
